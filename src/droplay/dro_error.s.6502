.error
{
\\error should be entered with JMP (not JSR)
\\on entry X contains the LO value of the relevant error block and Y contains the HI value
	STX error_block
	STY error_block+1

\\restore escape status
	LDA #%00000100;				check if bit 2 set
	BIT old_event_status
	BNE leave_esc_set
	LDA #&0D;					disable event
	LDX #6;						escape event code
	LDY #0;						because AUG says this is required
	JSR osbyte
.leave_esc_set
	
\ \\restore character event status
	\ LDA #%00100000;				check if bit 5 set
	\ BIT old_event_status
	\ BNE leave_char_event_set
	\ LDA #&0D;					disable event
	\ LDX #2;						character event code
	\ LDY #0;						because AUG says this is required
	\ JSR osbyte
\ .leave_char_event_set
	
\ \\restore timer zero event status
	\ LDA #%00000001;				check if bit 0 set
	\ BIT old_event_status
	\ BNE leave_timer_event_set
	\ LDA #&0D;					disable event
	\ LDX #5;						timer event code
	\ LDY #0;						because AUG says this is required
	\ JSR osbyte
\ .leave_timer_event_set
	
\ \\restore vsync event status
	\ LDA #%00000010;				check if bit 1 set
	\ BIT old_event_status
	\ BNE leave_vsync_event_set
	\ LDA #&0D;					disable event
	\ LDX #4;						vsync event code
	\ LDY #0;						because AUG says this is required
	\ JSR osbyte
\ .leave_vsync_event_set

\\restore EVNTV
	LDA evntv_old
	STA evntv
	LDA evntv_old+1
	STA evntv+1
	
\\turn off YM3812 timer
	LDA #&04					
	STA ymaddr
	LDA #&60
	STA ymdata

\\close file
	LDA #0;					CLOSE
	LDY control_file_handle
	JSR osfind

\\restore IRQV
	SEI
	LDA irq1v_old
	STA irq1v
	LDA irq1v_old+1
	STA irq1v+1

\\YM3812 flush
	JSR flush

\\re-enable ADC sampling
	LDA #&10
	LDX old_ADC
	JSR osbyte

\\re-enable interrupts
	CLI
	
\ \\clean-up bottom row
\ {
	\ LDA #0
	\ LDX #40
\ .loop
	\ DEX
	\ STA bottom_row, X
	\ BNE loop
\ }	

\\generate error
	JMP (error_block)
}	
.error_block
	EQUW &0000
\\BASIC errors
.escape
	BRK;					BRK opcode
	EQUB 17;				error number
	EQUS "Escape"
	EQUB 0;					message termination character

\\user errors	
.syntax_error
	BRK;					BRK opcode
	EQUB 65;				error number
	EQUS "Syntax: JUKPLAY (<fsp>)(-TEST)"
	EQUB 0;					message termination character
.card_ok
	BRK;					BRK opcode
	EQUB 66;				error number
	EQUS "BeebOPL card found"
	EQUB 0;					message termination character
.no_card
	BRK;					BRK opcode
	EQUB 67;				error number
	EQUS "BeebOPL card not found"
	EQUB 0;					message termination character
.error_opening
	BRK;					BRK opcode
	EQUB 68;				error number
	EQUS "Error opening file"
	EQUB 0;					message termination character
.not_DRO
	BRK;					BRK opcode
	EQUB 69;				error number
	EQUS "Not a valid DRO file"
	EQUB 0;					message termination character
.wrong_version
	BRK;					BRK opcode
	EQUB 70;				error number
	EQUS "Unsupported DRO version"
	EQUB 0;					message termination character
.wrong_hardware
	BRK;					BRK opcode
	EQUB 71;				error number
	EQUS "Wrong card version"
	EQUB 0;					message termination character
.compressed
	BRK;					BRK opcode
	EQUB 72;				error number
	EQUS "Compressed file not supported"
	EQUB 0;					message termination character
.buffer_fail
	BRK;					BRK opcode
	EQUB 73;				error number
	EQUS "Buffer failure - filing system too slow"
	EQUB 0;					message termination character

\\MOS errors
.not_found
	BRK;					BRK opcode
	EQUB 214;				error number
	EQUS "File not found"
	EQUB 0;					message termination character

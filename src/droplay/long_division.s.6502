\\need to understand how this works 
\\can I simplify this since only ever dividing by 6000
\\also in final version we won't be using the higher bytes of the timer
\\two bytes can store 10 minutes, 55 seconds
\\three bytes can store over 46 hours!

\\It would be much better of this was all in zero page
\\To start, the 32-bit dividend is in N(math_block)+2 (byte 2), N+3 (byte 1, or hi byte), N+4 (byte 4, or lo byte), & N+5 (byte 3).
\\The 16-bit divisor is in N+0 and N+1 (lo byte first, as is usual for the 6502).
	
\\At the end, the 16-bit quotient is in N+4 & N+5, and 16-bit remainder is in N+2 & N+3 both with low byte first, as usual for 6502, like the divisor shown above.
\\In other words, the remainder and quotient end up in the same memory bytes that originally held the dividend.

\\N+6 is used for an intermediate scratchpad byte.
\\X is used for loop-counting.
\\Y is used for temporary byte storage.
\\Overflow and divide by zero are shown by FFFF in both quotient and remainder.
\\Input and output are unsigned.
\\see http://www.6502.org/source/integers/ummodfix/ummodfix.htm	

.long_division
{
	SEC             		; Detect overflow or /0 condition.
	LDA math_block+2     	; Divisor must be more than high cell of dividend.  To
	SBC math_block       	; find out, subtract divisor from high cell of dividend;
	LDA math_block+3     	; if carry flag is still set at the end, the divisor was
	SBC math_block+1     	; not big enough to avoid overflow. This also takes care
	BCS oflo	   			; of any /0 condition.  Branch if overflow or /0 error.
							; We  will loop 16 times; but since we shift the dividend
	LDX #&11    			; over at the same time as shifting the answer in, the
							; operation must start Amath_blockD finish with a shift of the
							; low cell of the dividend (which ends up holding the
							; quotient), so we start with 17 (11H) in X.
.loop
	ROL math_block+4    	; Move low cell of dividend left one bit, also shifting
	ROL math_block+5     	; answer in. The 1st rotation brings in a 0, which later
							; gets pushed off the other end in the last rotation.
	DEX 
	BEQ end   			 	; Branch to the end if finished.
        
	ROL math_block+2     	; Shift high cell of dividend left one bit, also
	ROL math_block+3     	; shifting next bit in from high bit of low cell.
	LDA #0
	STA carry   			; Zero old bits of carry so subtraction works right.
	ROL carry   			; Store old high bit of dividend in carry.  (For STZ
							; one line up, NMOS 6502 will need LDA #0, STA carry.)
	SEC         			; See if divisor will fit into high 17 bits of dividend
	LDA math_block+2     	; by subtracting and then looking at carry flag.
	SBC math_block       	; First do low byte.
	STA math_block+6     	; Save difference low byte until we know if we need it.
	LDA math_block+3     	;
	SBC math_block+1     	; Then do high byte.
	TAY         			; Save difference high byte until we know if we need it.
	LDA carry   			; Bit 0 of carry serves as 17th bit.
	SBC #0      			; Complete the subtraction by doing the 17th bit before
	BCC loop    			; determining if the divisor fit into the high 17 bits
							; of  the dividend.  If so, the carry flag remains set.
	LDA math_block+6     	; If divisor fit into dividend high 17 bits, update
	STA math_block+2     	; dividend high cell to what it would be after
	STY math_block+3     	; subtraction.
	BCS loop    			; Always branch.  NMOS 6502 could use BCS here.
.oflo  
	LDA #&FF    			; If overflow occurred, put FF
	STA math_block+2     	; in remainder low byte
	STA math_block+3     	; and high byte,
	STA math_block+4     	; and in quotient low byte
	STA math_block+5     	; and high byte.
.end
	RTS
}
.bottom_of_divide

\ \\ if this routine is being used in a loop use zp for workspace
\ IF repeated_long_division
	\ ORG &A8
\ ENDIF

.math_block
.divisor
	EQUW &0000
.dividend_hi
.remainder
	EQUW &0000
.dividend_lo
.quotient
	EQUW &0000
.scratchpad
	EQUB &00
.carry
	EQUB &00

\ \\ if we used zp above, need to go back to the next available assembly space	
\ IF repeated_long_division
	\ ORG bottom_of_divide
\ ENDIF
	
	
\\see http://psy.swansea.ac.uk/staff/Carter/projects/BBC_Millisec.htm	
	
\ .divide                  \performs 2 byte division  (byte/val)
	\ LDX #&FF
\ .convloop
	\ SEC                      \set borrow for subtraction
	\ INX
	\ LDA lobyte
	\ SBC loval
	\ STA lobyte               \subtract lo-byte
	\ LDA hibyte
	\ SBC hival
	\ STA hibyte               \subtract hi-byte
	\ BCS convloop             \continue if remainder > divisor
	\ TXA
	\ STA answer,Y             \store quotient
	\ LDA lobyte
	\ CLC
	\ ADC loval
	\ STA lobyte               \add back divisor lo-byte
	\ LDA hibyte
	\ ADC hival
	\ STA hibyte               \add back divisor hi-byte
	\ RTS

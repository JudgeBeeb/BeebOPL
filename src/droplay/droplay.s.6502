\\***********OUTSTANDING ISSUES************************
\\           ==================
\\ - losing a few bytes at the end of the tune - not consistent varies between 0 and 6
\\
\\ - flush isn't 100% reliable - sometimes, slightly weird sounds in a new song - cleared by doing a hard break
\\	 need to code this based on the code in the Ad Lib SDTK


beebem=FALSE;							Set to true if running in BeebEm for debugging
									;	Otherwise, set to false if running on native hardware
									
debug_data=TRUE;						Set to true to display debugging data at the bottom of
									;	a MODE 7 screen

ORG &1A00;								Assemble at &100 above PAGE to avoid 'Bad Program' errors

INCLUDE "lib\beeb.h.6502";				Contains definitions for the MOS API calls, etc.
 
\\zero page variables
irq1v_old=&70;			(&70 and &71)
irq2v_old=&70;			(&70 and &71);					We don't need to intercept both IRQ vectors, it is always one or the other
mem_ptr=&72;			(&72 and &73);					Location in memory currently being played
delay=&74;				(&74 and &75);					Outstanding duration of current delay (if not zero)
load_page=&76;											Page where the next load will occur
top_page=&77;											This is the page above the top of the circular buffer (i.e. the buffer doesn't extend into top_page)
flags=&78;												Bit 0 - set if mem_ptr is in head_page
													;	Bit 1 - set if end of tune reached
													;	Bit 2 - set if player has lapped loader
													;	Bit 3 - set if escape key has been pressed
													;	Bit 4 - set if f9 key has been pressed
													;	Bit 5 - set if on screen timer is ready			(only used by Juke Box variant)
													;	Bit 6 - set if EOF reached
													;	Bit 7 - set if there was a remainder from the last divide by two
evntv_old=&79;			(&79 and &7A)
filename_address=&7B;	(&7B, &7C, &7D, &7E)			Pointer to the <fsp> parsed to the commmand
													;	Frustratingly, osargs, requires this block to be in zp
\ final_bytes=&7F;									; 	the number of bytes in the final page of the tune													
\\final_bytes isn't working at the moment

\ \\can we put control_block in zp? there is space but, bizzarely, it seems to make it run slower! (and also breaks print_text)
\ \\it's pretty pointless to do this because osgbpb is expecting it in regular memory and will be compiled to use absolute (and not zp) adressing
\ \\need to zero out in code and put HI(head_page) in control_load_page
\ control_block=&7F
\ control_file_handle=&7F;								same as control_block
\ control_mem_addr=&80;	(&80, &81, &82, &83)
\ tune_end=&80;											same as control_mem_addr (when we reach EOF, the byte after the final address will be stored here)
\ control_load_page=&81;								located inside control_mem_addr
\ control_bytes_to_read=&84;	(&84, &85, &86, &87)
\ control_pages_to_read=&85;							located inside control_bytes_to_read

\\MUST SET UP EVERYTHING THAT ERROR RESETS BEFORE THERE IS AN ERROR OTHERWISE ERROR WILL GO MENTAL

.start
	PHP:PHA:TXA:PHA:TYA:PHA;		preserve all the registers on the stack
	
\\ put zero in variables
	LDA #0
	STA delay
	STA delay+1
	STA flags

\\get value for top_page
	LDA #&84
	JSR osbyte;						On exit, X and Y contain the HIMEM address (X=low byte, Y=high byte)
	STY top_page

\\set value for control_pages_to_read
	TYA
	SEC
	SBC #HI(head_page)
	STA control_pages_to_read;		place the value in the control block ready for reading from file
	
\\get filename	
	LDA #1
	LDX #filename_address
	LDY #0
	JSR osargs

\\YM3812 flush
	JSR flush
	
\\we need to setup the following before we generate any errors
\\because the error handler tries to reset them

\\intercept events
	LDA evntv
	STA evntv_old
	LDA evntv+1
	STA evntv_old+1
	LDA #LO(event_handler)
	STA evntv
	LDA #HI(event_handler)
	STA evntv+1

\\enable escape events
	LDA #&0E;			enable event
	LDX #6;				escape event
	JSR osbyte
	TXA
	BEQ escape_not_set
	LDA old_event_status
	ORA #%01000000;			set bit 6
	STA old_event_status
.escape_not_set

\\this is used in the corresponding part of Juke Box
\ \\enable character buffer events
	\ LDA #&0E;			enable event
	\ LDX #2;			character buffer event
	\ JSR osbyte
	\ TXA
	\ BEQ character_not_set
	\ LDA old_event_status
	\ ORA #%00000100;			set bit 2
	\ STA old_event_status
\ .character_not_set

\\this is currently used in the corresponding part of Juke Box
\\but will probably change the playback timer to use vsync for timing
\ \\enable timer zero events
	\ LDA #&0E;			enable event
	\ LDX #5;				timer event
	\ JSR osbyte
	\ TXA
	\ BEQ timer_zero_not_set
	\ LDA old_event_status
	\ ORA #%00100000;			set bit 5
	\ STA old_event_status
\ .timer_zero_not_set

\\this is used in the corresponding part of Juke Box
\\it is used here for the debugging data at the bottom of the screen
\\enable vsync events
IF debug_data
	LDA #&0E;			enable event
	LDX #4;				vsync event
	JSR osbyte
	TXA
	BEQ vsync_not_set
	LDA old_event_status
	ORA #%00010000;			set bit 4
	STA old_event_status
.vsync_not_set
ENDIF

\intercept interrupts
	SEI;							disable interrupts
	LDA irq1v;						preserve existing IRQV
	STA irq1v_old
	LDA irq1v+1
	STA irq1v_old+1
	LDA #LO(irq_handler);			redirect IRQV to our IRQ handler
	STA irq1v;						INTERCEPTING IRQ1V
	LDA #HI(irq_handler)
	STA irq1v+1
	CLI;							re-enable interrupt
	
\\disable ADC sampling
	LDA #&10
	LDX #0;					no ADC sampling
	JSR osbyte
	STX old_ADC;			the old value is returned in X
	
\\check for a 'null' filename; if so, return syntax instructions and end
	LDX #0
	LDA (filename_address, X)
	CMP #&0D;				termination string
	BNE not_null
	LDX #LO(syntax_error)
	LDY #HI(syntax_error)
	JMP error
.not_null

\\ test for presence of BeebOPL card
\\ THERE HAS GOT TO BE MORE EFFICIENT CODE THAN THIS
\\ This is EXACTLY how the Ad Lib Sound Driver does it
\\ we don't need to use zp for this as we only do it once
\\ but it does no harm because these locations are only used by long division 
\\ and we haven't called it yet
{
	SEI;										this procedure will generate unwanted interrupts
	LDA #&04: STA ymaddr: LDA #&60: STA ymdata;	Reset timers 1 and 2
	LDA #&04: STA ymaddr: LDA #&80: STA ymdata;	Reset the IRQ
	LDA ymaddr: AND #&E0: STA scratch_a;		Read status register. Save the result. 
											;	You should AND the result bytes with &E0h because
											;	the unused bits are undefined.
	LDA #&02: STA ymaddr: LDA #&FF: STA ymdata;	Set timer 1 to &FF.
	LDA #&04: STA ymaddr: LDA #&21: STA ymdata;	Unmask and start timer 1.
	LDX #40;									Each loop lasts 5 cycles (2.5μsec); so 32=80μsec, 40=100μsec, 48=120μsec
.delay_loop
	DEX
	BNE delay_loop;								Wait in a delay loop for at least 80μsec. (Ad Lib driver waits 100μsec)
	LDA ymaddr: AND #&E0: STA scratch_b;		Read status register. Save the result. 
											;	You should AND the result bytes with &E0 because
											;	the unused bits are undefined.
	LDA #&04: STA ymaddr: LDA #&60: STA ymdata
	LDA #&04: STA ymaddr: LDA #&80: STA ymdata;	Reset timers 1 and 2 and IRQ as above.
	CLI;										re-enable interrupts
											;	Test the results of the two reads
	LDA scratch_a: BNE card_absent			;	the first should be 0, 
	LDA scratch_b: CMP #&C0: BEQ card_present;	the second should be &C0.
.card_absent
IF beebem
\\ don't generate error if running in BeebEm because the test will always fail
ELSE
	LDX #LO(no_card)
	LDY #HI(no_card)
	JMP error
ENDIF
.card_present
}	

\\check for "-TEST" switch (if we have got this far, there must be a working card)
\\?DEVELOP THIS TO ALLOW OTHER SWITCHES
{
	LDY #0
	LDA (filename_address), Y;				get the first character
	CMP #'-';								is it a '-'?
	BNE not_switch;							if not, it is not a switch and is presumably a filename
	INY
.loop
	LDA (filename_address), Y
	CMP test, Y
	BNE not_test
	INY
	CPY #6
	BNE loop
	LDX #LO(card_ok)
	LDY #HI(card_ok)
	JMP error
.test
	EQUS "-TEST", 13
.not_test
\\if we get here, it is not a valid switch
	LDX #LO(syntax_error)
	LDY #HI(syntax_error)
	JMP error
.not_switch
}

\\get file length
{
	LDA filename_address
	STA osfile_filename_address
	LDA filename_address+1
	STA osfile_filename_address+1
	LDA #5;								get catalogue entry
	LDX #LO(osfile_block)
	LDY #HI(osfile_block)
	JSR osfile
	BNE file_found;						A=0 if not found (I am assuming that the Z returns correctly conditioned)(it certainly seems to work)
\\report error
	LDX #LO(not_found)
	LDY #HI(not_found)
	JMP error
.file_found
}

\\test for escape before commencing potentially long disk read
{
	LDA #%00001000; 			test bit 3 for escape
	BIT flags
	BEQ no_escape
	LDX #LO(escape)
	LDY #HI(escape)
	JMP error
.no_escape
}	

\\this is used in the corresponding part of Juke Box
\ \\test for f9 key press before commencing potentially long disk read
\ {	
	\ LDA #%00010000; 			test bit 4 for f9 key press
	\ BIT flags
	\ BEQ no_f9
	\ LDX #LO(f9_key)
	\ LDY #HI(f9_key)
	\ JMP error
\ .no_f9
\ }

\\check if file will fit in memory
\\if bytes 3 and 2 contain anything other than zero, it is clearly too large
{
	LDA osfile_length+3
	BNE too_big
	LDA osfile_length+2
	BNE too_big
	LDA top_page;						this is the top of available memory
	SEC;								prepare for subtraction
	SBC #HI(head_page);					this is where data loads
\\A now contains the number of available pages
	CMP osfile_length+1;				there are three possible outcomes
									;	Z is set - there are exactly the correct number of pages - will only fit if osfile_length=0
									;	C is set (must only check after checking Z) - there is enough room
									;   neither C nor Z is set - there is not enough room
	BEQ check_remaining_bytes;			branch if Z set first
	BCS file_fits;						if C is set then there is enough_room
	JMP	too_big
.check_remaining_bytes
	LDA osfile_length
	BNE too_big
}
.file_fits
\\now we need to load the full file
	LDA #LO(head_page)
	STA osfile_load_address
	LDA #HI(head_page)
	STA osfile_load_address+1
	LDA #0
	STA osfile_load_indicator;			tell osfile to use the load address we are specifying
	LDA #&FF;							load file
	JSR osfile
\\iindicate that we have got to the end of the file
	LDA flags
	ORA #%01000000;			set bit 6 (EOF reached)
	STA flags

\\and keep a record of where the file ends
	LDA osfile_length; 		get the LSB of the file length
	STA tune_end;			and store it in the LSB of tune_end (no need to do any maths with this, as we loaded at a page boundary)
	LDA osfile_length+1;	get the MSB (there are no more bytes as it fits in memory) of the file length
	ADC #HI(head_page);		add the page where we loaded it
	STA tune_end+1;			and store it in the MSB of tune_end
	JMP data_in_memory

.too_big
\\open file for sequential access
	LDA #&40;				OPENIN
	LDX filename_address
	LDY filename_address+1
	JSR osfind
	BNE file_opened
\\A returns with zero if the file could not be opened...
\\report error
	LDX #LO(error_opening)
	LDY #HI(error_opening)
	JMP error

.file_opened
\\...otherwise, A contains the file handle
	STA control_file_handle;				place the handle in the control block ready for reading from file
\\control_pages_to_read was set up earlier when we got the value of top_page
\\control_load_page for the first load is fixed at head_page and this is already in control_block
\\so nothing else to initialise

\\Warn the user we are in for a bit of a wait
	JSR print_text
	EQUS "Buffering. Please wait... ", 0

\\get first few pages of data
	LDA #4;						read block using PTR#
	LDX #LO(control_block)
	LDY #HI(control_block)
	JSR osgbpb

\\tell user we are done
	JSR print_text
	EQUS "Done!", 13, 0
		
.data_in_memory	
\\check if DRO file
{
	LDX #0
.loop
	LDA signature, X
	CMP check_signature, X
	BNE DRO_check_fail
	INX
	CPX #8
	BNE loop
	JMP DRO_check_pass
.DRO_check_fail
	LDX #LO(not_DRO)
	LDY #HI(not_DRO)
	JMP error
.DRO_check_pass
}

\\check version number
{
	LDA version_major
	CMP #2
\\all the other bytes should be zero in a genuine 2.0 file
	BNE version_check_fail
	LDA version_major+1
	BNE version_check_fail
	LDA version_minor
	BNE version_check_fail
	LDA version_minor+1
	BNE version_check_fail
	JMP version_check_pass
.version_check_fail
	LDX #LO(wrong_version)
	LDY #HI(wrong_version)
	JMP error
.version_check_pass
}

\\check for hardware type
{
	LDA hardware_type
	BEQ OPL2;							hardware_type=0 for OPL2 files
	LDX #LO(wrong_hardware)
	LDY #HI(wrong_hardware)
	JMP error
.OPL2
}

\\check for compression
{
	LDA compression
	BEQ not_compressed;					0 for uncompressed files (there are no other values, but we might use it at a later date for pucrunch or exomiser)
	LDX #LO(compressed)
	LDY #HI(compressed)
	JMP error
.not_compressed
}

\\check for an odd number of bytes in the command table
\\player assumes that each register pair starts at an even numbered address (because it is easier to code it that way)
\\this will be the case if there are an even number of bytes in the command table
\\so far, this has proven to be the case for all files
\\if there were an odd number, DROPLAY would crash
\\this error is really intended to identify whether there are such files, in the field
{
	LDA #%00000001;						odd binary numbers always have a LSB of 1
	BIT .cmd_table_size
	BEQ even_number;					the result will be zero if the number is even
	LDX #LO(odd_number)
	LDY #HI(odd_number)
	JMP error
.even_number
}
	
\\this calculation doesn't seem to work
\ \\calculate the number of bytes in the final page
\ \\start with the LSB of length_pairs
	\ LDA length_pairs
\ \\multiply by two to get number of bytes
	\ ASL A
\ \\the register pairs do not start at a page boundary
\ \\they are offset by the length of the header
	\ CLC
	\ ADC #HI(cmd_table)
\ \\and by the size of the command table
	\ CLC
	\ ADC cmd_table_size
\ \\finally store the result
	\ STA final_bytes
	
\\initialise mem_ptr
	CLC
	LDA #LO(cmd_table)
	ADC cmd_table_size
	STA mem_ptr
	LDA #HI(cmd_table)
	ADC #0
	STA mem_ptr+1
	LDA flags
	ORA #%00000001;						set bit 0 to show that mem_ptr is in head_page
	STA flags

\\==============================================================================
\\This whole section is concerned with setting up the timer in Juke Box
\\Will need a degree of modification to use vsync instead of the interval timer

\ \\setup on screen timer
\ \\place the colons
	\ LDA #':'
	\ STA bottom_row+34
	\ LDA #'.'
	\ STA bottom_row+37

\ \\calculate timer value
\ \\we need to divide the timer value from the header by 10
\ \\this will crash if we have a tune that lasts longer than &FFFF hundredths of a second (i.e. more than 10 minutes 55 seconds )
	
\ \\load length_MS into dividend_lo and dividend_hi
	\ LDA length_MS
	\ STA dividend_lo
	\ LDA length_MS+1
	\ STA dividend_lo+1
	\ LDA length_MS+2
	\ STA dividend_hi
	\ LDA length_MS+3
	\ STA dividend_hi+1
	
\ \\load 10 into divisor
	\ LDA #10
	\ STA divisor
	\ LDA #0
	\ STA divisor+1
	
\ \\now do the division
	\ JSR long_division
	
\ \\copy result into duration
	\ LDA quotient
	\ STA duration
	\ LDA quotient+1
	\ STA duration+1
	\ LDA #0
	\ STA duration+2
	\ STA duration+3
	\ STA duration+4

\ \\calculate the inverse of this (interval timer counts up)	
	\ SEC
	\ LDA #0
	\ SBC duration
	\ STA duration
	\ LDA #0
	\ SBC duration+1
	\ STA duration+1
	\ LDA #0
	\ SBC duration+2
	\ STA duration+2
	\ LDA #0
	\ SBC duration+3
	\ STA duration+3
	\ LDA #0
	\ SBC duration+4
	\ STA duration+4
	
\ \\put value in interval timer
	\ LDA #&4;			write interval timer
	\ LDX #LO(duration)
	\ LDY #HI(duration)
	\ JSR osword

\ \\iindicate that on screen timer is ready
	\ LDA flags
	\ ORA #%00100000;			set bit 5 (on screen timer ready)
	\ STA flags

\\==============================================================================
	
\\setup YM3812 timer
	LDA #&04;					
	STA ymaddr
	LDA #&60;
	STA ymdata;				mask (reset) both timers
	LDA #&80;				reset IRQ (i.e. enable interrupts)
	STA ymdata
	LDA #&02;
	STA ymaddr
	LDA #231;				timer 1 has a resolution of 80 microseconds and counts up. So 231 = 256-231 = 25*80 = 2ms
	STA ymdata
	LDA #&04
	STA ymaddr
	LDA #&21;				turn on timer 1 (and mask timer 2)
	STA ymdata

\\the loader is the most critcial part of the app
\\it has significant performance issues
\\(albeit ones which are probably not amenable to remedy)
\\easier to deal with it in a separate file

INCLUDE "src\droplay\loader.s.6502"
	
.end_game
{\\turn off YM3812 timer
	LDA #&04					
	STA ymaddr
	LDA #&60
	STA ymdata

\\restore IRQV
	SEI
	LDA irq1v_old
	STA irq1v
	LDA irq1v_old+1
	STA irq1v+1
	CLI

\\re-enable ADC sampling
	LDA #&10
	LDX old_ADC
	JSR osbyte

\\this is used in the corresponding part of Juke Box
\ \ \\restore character event status
	\ \ LDA #%00000100;				check if bit 2 set
	\ \ BIT old_event_status
	\ \ BNE leave_char_event_set
	\ \ LDA #&0D;					disable event
	\ \ LDX #2;						character event code
	\ \ LDY #0;						because AUG says this is required
	\ \ JSR osbyte
\ \ .leave_char_event_set
	
\\this is only necessary when displaying the debugging data at the bottom of the screen
\\it is also necessary in the corresponding part of Juke Box
IF debug_data
\\restore vsync event status
	LDA #%00010000;				check if bit 4 set
	BIT old_event_status
	BNE leave_vsync_event_set
	LDA #&0D;					disable event
	LDX #4;						vsync event code
	LDY #0;						because AUG says this is required
	JSR osbyte
.leave_vsync_event_set
ENDIF

\\this is used in the corresponding part of Juke Box
\ \ \\restore timer zero event status
	\ \ LDA #%00100000;				check if bit 5 set
	\ \ BIT old_event_status
	\ \ BNE leave_timer_event_set
	\ \ LDA #&0D;					disable event
	\ \ LDX #5;						timer event code
	\ \ LDY #0;						because AUG says this is required
	\ \ JSR osbyte
\ \ .leave_timer_event_set

\\restore escape event status
	LDA #%01000000;				check if bit 6 set
	BIT old_event_status
	BNE leave_esc_set
	LDA #&0D;					disable event
	LDX #6;						escape event code
	LDY #0;						because AUG says this is required
	JSR osbyte
.leave_esc_set
	
\\restore EVNTV
	LDA evntv_old
	STA evntv
	LDA evntv_old+1
	STA evntv+1

\\close file
	LDA #0;					CLOSE
	LDY #0;					close all files
	JSR osfind
	
\\this is used in the corresponding part of Juke Box
\ \\clean-up bottom row
\ {
	\ LDA #0
	\ LDX #40
\ .loop
	\ DEX
	\ STA bottom_row, X
	\ BNE loop
\ }	

\YM3812 flush
	JSR flush

\\recover all the registers	
	PLA:TAY:PLA:TAX:PLA:PLP
	
	RTS; goodbye
}	

\\INCLUDES FOR ALL THE SUBROUTNES	
INCLUDE "src\droplay\player.s.6502"
INCLUDE "src\droplay\dro_event.s.6502"
INCLUDE "src\droplay\dro_error.s.6502"
INCLUDE "src\droplay\dro_subroutines.s.6502";			THIS WILL INCLUDE THE CODE FOR ~ALL~ THE SUBROUTINES, NOT JUST THE ONES WE USE
\ INCLUDE "src\droplay\long_division.s.6502"


\\SETUP  MEMORY BLOCKS
.check_signature
	EQUS "DBRAWOPL"
	
\\dummy control block for osgbpb
\\it takes 9 bytes of code to zero out control_bytes_to_read (excluding control_pages_to_read, which we have to set in code)
\\it takes a further 12 bytes of code to set the initial value for control_mem_addr 
\\(i.e. a total of 21 bytes)
\\control_block is only 13 bytes long, so it is easier to include it in the code, prefilled
\\also, the content of control_ptr doesn't matter, so we can leave that outside the code
.control_block
.control_file_handle; 	1 byte
	EQUB &00
.control_mem_addr;		4 bytes
.tune_end;							when we reach EOF, the byte after the final address will be stored here
	EQUB &00
.control_load_page
	EQUB HI(head_page)
	EQUW &0000
.control_bytes_to_read; 4 bytes
	EQUB &00
.control_pages_to_read
	EQUB &00
	EQUW &0000

\\end the program here, becasue we have filled all of the necessary parts of control_block
.end

\\continue asigning space for the remainder of control_block
.control_ptr
	EQUD &00000000;		4 bytes

\\dummy parameter block for osfile
\\only osfile_filename_address (which we set at runtime) is relevant for osfile &05
\\so this block does not need to be zeroed out
.osfile_block
.osfile_filename_address
	EQUW &0000
.osfile_load_address
	EQUD &00000000
.osfile_load_indicator
.osfile_exec_adresss
	EQUD &00000000
.osfile_length
	EQUD &00000000
.osfile_lock_status
	EQUB &00

\\variables

\\this is used in the corresponding part of Juke Box
\ .minutes
	\ EQUB &00
\ .seconds
	\ EQUB &00
\ .hundredths
	\ EQUB &00
\ .duration
	\ EQUD &00000000
	\ EQUB &00

\\this is only used for the debugging display at the bottom of the screen
.column
	EQUB &00

.old_ADC
	EQUB &00
.old_event_status
	EQUB &00;											Bit 0 - set if 
													;	Bit 1 - set if 
													;	Bit 2 - set if character event was enabled before entry
													;	Bit 3 - set if
													;	Bit 4 - set if vsync event was enabled before entry
													;	Bit 5 - set if timer zero event was enabled before entry
													;	Bit 6 - set if escape event was enabled before entry
													;	Bit 7 - set if

ALIGN &100
.head_page;							This page contains the standard DRO header, plus the first few bytes of the music
\\dummy header
.signature
	EQUS "DBRAWOPL"
.version_major
	EQUW &0002
.version_minor
	EQUW &0000
.length_pairs
	EQUD &00000000;					Length of data in pairs (i.e. one YMADDR and one YMDATA would be measured as "1" pair)
.length_MS
	EQUD &00000000;					Length of the tune in milliseconds
.hardware_type
	EQUB &00;						0=OPL2, 1=DUAL OPL2, 2=OPL3
.format
	EQUB &00;						0=data commands and data interleaved, no other vzriants known
.compression
	EQUB &00;						0= no compression, no other variants known
.short_delay_code
	EQUB &00;						Code for delays of 256ms or less
.long_delay_code
	EQUB &00;	 					Code for delays of greater than 256ms (calculated in 256ms chunks)
.cmd_table_size
	EQUB &00;						Length in bytes of the command table
.cmd_table;							The command table is always located &1A bytes into the header
								;	Since the max size of the command table is &80 bytes, the music will begin at the most at &9A
ALIGN &100
.buff_page;							This is where the circular buffer (proper) starts. head_page must not be overwritten, because it contains the command table

PUTFILE "music\BRAZIL", "BRAZIL", 0
PUTFILE "music\FAIRY", "FAIRY", 0
PUTFILE "music\SWARS", "SWARS", 0
PUTFILE "music\CAMPELL", "CAMPELL", 0


SAVE "DROPLAY", start, end